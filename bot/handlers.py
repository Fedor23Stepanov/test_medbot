# bot/handlers.py

import asyncio
from functools import partial

from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters, CommandHandler, Application

from db.crud import (
    get_or_create_user,
    get_random_device,
    create_event,
    create_proxy_log
)
from crawler.redirector import fetch_redirect, ProxyAcquireError

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –ø–æ–∫–∞–∂—É, –∫—É–¥–∞ –æ–Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç."
    )

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_url = update.message.text.strip()

    # 1) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await get_or_create_user(
        tg_id=update.effective_user.id,
        username=update.effective_user.username or ""
    )

    # 2) –ü—Ä–æ—Ñ–∏–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(str(e))

    # 3) –°–æ–æ–±—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    msg = (
        f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ {raw_url}\n\n"
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å #{device['id']}: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        f"   ‚Ä¢ –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {device['css_size'][0]}√ó{device['css_size'][1]}\n"
        f"   ‚Ä¢ DPR: {device['dpr']}, mobile={device['mobile']}\n"
    )
    await update.message.reply_text(msg)

    # 4) –ó–∞–ø—É—Å–∫–∞–µ–º fetch_redirect –≤ executor
    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None,
            partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        for at in e.attempts:
            await create_proxy_log(
                attempt=at["attempt"],
                ip=at["ip"],
                city=at["city"]
            )
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–∏–π –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫."
        )

    # 5) –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
    for at in proxy_attempts:
        await create_proxy_log(
            attempt=at["attempt"],
            ip=at["ip"],
            city=at["city"]
        )

    # 6) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ status_code
    await create_event(
        user_id=user.id,
        device_option_id=device["id"],
        initial_url=initial_url,
        final_url=final_url,
        ip=ip,
        isp=isp
    )

    # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_text(
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL: {initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL: {final_url}\n"
        f"üåê IP: {ip} (ISP: {isp})"
    )

def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(
        MessageHandler(filters.Regex(r"^https?://"), handle_link)
    )
