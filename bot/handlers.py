# bot/handlers.py

import re
import asyncio
from functools import partial

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CommandHandler,
    Application
)

from db.crud import (
    get_user_by_tg,
    get_user_by_id,
    activate_user,
    invite_user,
    list_active_users,
    block_user,
    get_user_stats,
    get_user_events,
    get_random_device,
    create_event,
    create_proxy_log,
    set_transition_mode,
    set_notification_mode,
)
from db.models import UserStatus, TransitionMode, NotificationMode
from crawler.redirector import fetch_redirect, ProxyAcquireError
from config import ROLE_ADMIN, ROLE_MODERATOR

URL_PATTERN = re.compile(r'https?://[^\s)]+')

# –†–æ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
ROLE_LEVELS = {
    ROLE_ADMIN: 3,
    ROLE_MODERATOR: 2,
    "User": 1,
}


# ‚Äî‚Äî‚Äî –ú–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def build_main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]],
        resize_keyboard=True
    )


def build_stats_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [["–ù–∞–∑–∞–¥", "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã"]],
        resize_keyboard=True
    )


def build_settings_menu(role: str) -> ReplyKeyboardMarkup:
    rows = [
        ["–ù–∞–∑–∞–¥", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
        ["–†–µ–∂–∏–º –ø–µ—Ä–µ—Ö–æ–¥–∞"]
    ]
    if role in (ROLE_ADMIN, ROLE_MODERATOR):
        rows[1].append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


def build_transition_menu(role: str) -> ReplyKeyboardMarkup:
    rows = [
        ["–°—Ä–∞–∑—É", "–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"],
    ]
    for row in build_settings_menu(role).keyboard:
        rows.append(row)
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


def build_notification_menu(role: str) -> ReplyKeyboardMarkup:
    rows = [
        ["–ö–∞–∂–¥—ã–π –ø–µ—Ä–µ—Ö–æ–¥", "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏", "–û—Ç–∫–ª—é—á–µ–Ω—ã"],
    ]
    for row in build_settings_menu(role).keyboard:
        rows.append(row)
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


def build_user_mgmt_menu(role: str) -> ReplyKeyboardMarkup:
    first = ["–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]
    if role == ROLE_ADMIN:
        first.append("–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
    rows = [first]
    for row in build_settings_menu(role).keyboard:
        rows.append(row)
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)


# ‚Äî‚Äî‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, role: str):
    context.user_data["current_menu"] = "main"
    await update.message.reply_text("üßæ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=build_main_menu())


# ‚Äî‚Äî‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status != UserStatus.active:
        return
    stats = await get_user_stats(user.id)
    text = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats['all_time']}\n"
        f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {stats['last_month']}\n"
        f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['last_week']}"
    )
    context.user_data["current_menu"] = "stats"
    await update.message.reply_text(text, reply_markup=build_stats_menu())


# ‚Äî‚Äî‚Äî –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def user_events_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status != UserStatus.active:
        return
    events = await get_user_events(user.id)
    if not events:
        text = "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤."
    else:
        lines = []
        for ev in events:
            ts = ev.timestamp.strftime("%Y-%m-%d %H:%M")
            lines.append(f"{ts}  {ev.initial_url}")
        text = "\n".join(lines)
    context.user_data["current_menu"] = "events"
    await update.message.reply_text(text, reply_markup=build_stats_menu())


# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def settings_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status != UserStatus.active:
        return
    context.user_data["current_menu"] = "settings"
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=build_settings_menu(user.role))


# ‚Äî‚Äî‚Äî –†–µ–∂–∏–º –ø–µ—Ä–µ—Ö–æ–¥–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def transition_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status != UserStatus.active:
        return
    cur = user.transition_mode
    display = "–°—Ä–∞–∑—É" if cur == TransitionMode.immediate else "–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"
    context.user_data["current_menu"] = "transition"
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Ö–æ–¥–∞: {display}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=build_transition_menu(user.role)
    )


# ‚Äî‚Äî‚Äî –†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def notification_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status != UserStatus.active:
        return
    cur = user.notification_mode
    display = {
        NotificationMode.per_transition: "–ö–∞–∂–¥—ã–π –ø–µ—Ä–µ—Ö–æ–¥",
        NotificationMode.after_queue:   "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏",
        NotificationMode.disabled:      "–û—Ç–∫–ª—é—á–µ–Ω—ã"
    }[cur]
    context.user_data["current_menu"] = "notifications"
    await update.message.reply_text(
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {display}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=build_notification_menu(user.role)
    )


# ‚Äî‚Äî‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def users_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status != UserStatus.active or user.role not in (ROLE_ADMIN, ROLE_MODERATOR):
        return
    context.user_data["current_menu"] = "users"

    actives = await list_active_users()
    rows = []
    for u in actives:
        if u.id == user.id:
            continue  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–±—è
        # —Ç–æ–ª—å–∫–æ –≤—ã—à–µ —Å—Ç–æ—è—â–∏–µ –º–æ–≥—É—Ç —É–¥–∞–ª–∏—Ç—å
        if ROLE_LEVELS[user.role] > ROLE_LEVELS[u.role]:
            rows.append([
                InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å @{u.username}", callback_data=f"delete_{u.id}")
            ])
        else:
            rows.append([
                InlineKeyboardButton(f"@{u.username} ({u.role})", callback_data="noop")
            ])

    if rows:
        await update.message.reply_text(
            "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
            reply_markup=InlineKeyboardMarkup(rows)
        )
    else:
        await update.message.reply_text("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    await update.message.reply_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        reply_markup=build_user_mgmt_menu(user.role)
    )


async def delete_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    actor = await get_user_by_tg(q.from_user.id)
    if not actor or actor.status != UserStatus.active:
        return
    _, uid = q.data.split("_", 1)
    target = await get_user_by_id(int(uid))
    if not target:
        return await q.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if ROLE_LEVELS[actor.role] <= ROLE_LEVELS[target.role]:
        return await q.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
    ok = await block_user(target.id)
    await q.edit_message_text(
        f"{'‚úÖ' if ok else '‚ùå'} @{target.username} {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if ok else '–Ω–µ —É–¥–∞–ª—ë–Ω'}."
    )


async def noop_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö inline-–∫–Ω–æ–ø–æ–∫
    await update.callback_query.answer()


# ‚Äî‚Äî‚Äî –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start_invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status != UserStatus.active or user.role not in (ROLE_ADMIN, ROLE_MODERATOR):
        return

    text = update.message.text
    if text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        context.user_data["invite_role"] = "User"
    elif text == "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞" and user.role == ROLE_ADMIN:
        context.user_data["invite_role"] = ROLE_MODERATOR
    else:
        return

    context.user_data["awaiting_new_username"] = True
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
        reply_markup=ReplyKeyboardRemove()
    )


# ‚Äî‚Äî‚Äî /start –∏ /menu ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    username = (update.effective_user.username or "").strip().lstrip("@").lower()

    user = await get_user_by_tg(tg_id)
    # –∞–∫—Ç–∏–≤–Ω—ã–π ‚Üí –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if user and user.status is UserStatus.active:
        return await show_main_menu(update, context, user.role)

    # –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚Üí –∏–≥–Ω–æ—Ä
    if user and user.status is UserStatus.blocked:
        return

    # –ø—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å (pending ‚Üí active)
    activated = await activate_user(tg_id, username)
    if activated:
        return await show_main_menu(update, context, activated.role)

    # –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ ‚Üí –æ—Ç–∫–∞–∑
    await update.message.reply_text(
        "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=ReplyKeyboardRemove()
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if user and user.status is UserStatus.active:
        await show_main_menu(update, context, user.role)


# ‚Äî‚Äî‚Äî –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    text = update.message.text or ""
    username = (update.effective_user.username or "").strip().lstrip("@").lower()

    # –∞–≤—Ç–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è
    user = await get_user_by_tg(tg_id)
    if not user:
        user = await activate_user(tg_id, username)
        if user:
            return await show_main_menu(update, context, user.role)
        return await update.message.reply_text(
            "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardRemove()
        )
    if user.status is UserStatus.blocked:
        return  # –∏–≥–Ω–æ—Ä

    # –≤–≤–æ–¥ –Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    if context.user_data.pop("awaiting_new_username", False):
        uname = text.lstrip("@").lower()
        role_to = context.user_data.pop("invite_role")
        new = await invite_user(username=uname, role=role_to, invited_by=user.tg_id)
        context.user_data["current_menu"] = "users"
        return await update.message.reply_text(
            f"@{new.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω –∫–∞–∫ {new.role}. –°—Ç–∞—Ç—É—Å: ‚è≥",
            reply_markup=build_user_mgmt_menu(user.role)
        )

    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await stats_cmd(update, context)
    if text == "–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã":
        return await user_events_cmd(update, context)
    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        return await settings_cmd(update, context)

    if text == "–ù–∞–∑–∞–¥":
        cm = context.user_data.get("current_menu")
        # –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Üí –≥–ª–∞–≤–Ω–æ–µ
        if cm in ("stats", "events"):
            return await show_main_menu(update, context, user.role)
        # –∏–∑ –ø–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚Üí –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return await settings_cmd(update, context)

    if text == "–†–µ–∂–∏–º –ø–µ—Ä–µ—Ö–æ–¥–∞":
        return await transition_cmd(update, context)
    if text in ("–°—Ä–∞–∑—É", "–í —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"):
        mode = TransitionMode.immediate if text == "–°—Ä–∞–∑—É" else TransitionMode.daily_random
        await set_transition_mode(user.id, mode)
        return await settings_cmd(update, context)

    if text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        return await notification_cmd(update, context)
    if text in ("–ö–∞–∂–¥—ã–π –ø–µ—Ä–µ—Ö–æ–¥", "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏", "–û—Ç–∫–ª—é—á–µ–Ω—ã"):
        mapping = {
            "–ö–∞–∂–¥—ã–π –ø–µ—Ä–µ—Ö–æ–¥":   NotificationMode.per_transition,
            "–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏": NotificationMode.after_queue,
            "–û—Ç–∫–ª—é—á–µ–Ω—ã":        NotificationMode.disabled,
        }
        await set_notification_mode(user.id, mapping[text])
        return await settings_cmd(update, context)

    if text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        return await users_cmd(update, context)
    if text in ("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"):
        return await start_invite(update, context)

    # –¥–∞–ª–µ–µ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ (–¥–ª—è active only)
    if user.status is not UserStatus.active:
        return

    urls = URL_PATTERN.findall(text)
    if not urls:
        await create_event(user_id=user.id, state="no link",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.",
            reply_to_message_id=update.message.message_id
        )
    if len(urls) > 1:
        await create_event(user_id=user.id, state="many links",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text(
            "‚ùó –û–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_to_message_id=update.message.message_id
        )

    raw_url = urls[0]
    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(
            str(e),
            reply_to_message_id=update.message.message_id
        )

    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None, partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        for at in e.attempts:
            await create_proxy_log(at["attempt"], at["ip"], at["city"])
        await create_event(user_id=user.id, state="proxy error",
                           device_option_id=device["id"], initial_url=raw_url,
                           final_url="", ip=None, isp=None)
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_to_message_id=update.message.message_id
        )

    for at in proxy_attempts:
        await create_proxy_log(at["attempt"], at["ip"], at["city"])

    await create_event(user_id=user.id, state="success",
                       device_option_id=device["id"],
                       initial_url=initial_url, final_url=final_url,
                       ip=ip, isp=isp)

    report = (
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL:\n{initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL:\n{final_url}\n"
        f"üåê IP: {ip}\n"
        f"üì° ISP: {isp}"
    )
    await update.message.reply_text(
        report,
        disable_web_page_preview=True,
        reply_to_message_id=update.message.message_id
    )


def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))

    # callbacks –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    app.add_handler(CallbackQueryHandler(delete_cb, pattern=r"^delete_\d+$"))
    app.add_handler(CallbackQueryHandler(noop_cb,   pattern=r"^noop$"))

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
