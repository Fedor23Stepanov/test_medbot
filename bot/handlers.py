# bot/handlers.py

import re
import asyncio
from functools import partial
from telegram import Update
from telegram.ext import (
    ContextTypes, MessageHandler, filters, CommandHandler, Application
)
from db.crud import (
    get_or_create_user, get_random_device,
    create_event, create_proxy_log,
    get_user_role, set_user_role
)
from crawler.redirector import fetch_redirect, ProxyAcquireError
from config import INITIAL_ADMINS

URL_PATTERN = re.compile(r'https?://[^\s)]+')

# --- –£—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º ---
async def check_access(update: Update, roles_allowed: list[str]) -> bool:
    tg_id = update.effective_user.id
    role = await get_user_role(tg_id)
    if role not in roles_allowed:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
            reply_to_message_id=update.message.message_id
        )
        return False
    return True

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –ø–µ—Ä–≤–æ–º /start:
      ‚Äì —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      ‚Äì –µ—Å–ª–∏ –µ–≥–æ username –≤ INITIAL_ADMINS (–±–µ–∑ @, –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É) –∏ –æ–Ω –µ—â—ë –Ω–µ Admin,
        –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–º—É —Ä–æ–ª—å Admin
      ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      ‚Äì –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    """
    tg_id = update.effective_user.id
    username_raw = update.effective_user.username or ""
    username = username_raw.strip()
    username_lower = username.lower()

    # 1) –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    user = await get_or_create_user(tg_id=tg_id, username=username)

    # 2) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å
    admin_list = [name.strip().lower() for name in INITIAL_ADMINS]
    current_role = await get_user_role(tg_id)

    # 3) –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("=== START HANDLER DEBUG ===")
    print(f"Incoming tg_id       : {tg_id}")
    print(f"Incoming username    : '{username_raw}' -> '{username_lower}'")
    print(f"INITIAL_ADMINS       : {INITIAL_ADMINS} -> {admin_list}")
    print(f"Current role in DB   : {current_role}")

    # 4) –ù–∞–∑–Ω–∞—á–∞–µ–º Admin, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if current_role != "Admin" and username_lower in admin_list:
        print(f"-> '{username_lower}' –Ω–∞–π–¥–µ–Ω –≤ INITIAL_ADMINS, –¥–∞—ë–º —Ä–æ–ª—å Admin")
        await set_user_role(tg_id, "Admin")
        print(f"-> –†–æ–ª—å –¥–ª—è '{username_lower}' —Ç–µ–ø–µ—Ä—å Admin")
    else:
        print("-> –ù–µ –¥–∞—ë–º —Ä–æ–ª—å Admin (–ª–∏–±–æ —É–∂–µ –µ—Å—Ç—å, –ª–∏–±–æ username –Ω–µ –≤ —Å–ø–∏—Å–∫–µ)")

    # 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ-—Ü–∏—Ç–∞—Ç—É
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –ø–æ –Ω–µ–π –ø–µ—Ä–µ–π–¥—É.",
        reply_to_message_id=update.message.message_id
    )
    print("=== END START HANDLER ===\n")

# --- –ö–æ–º–∞–Ω–¥–∞ /add_user (Admin & Maintainer) ---
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin", "Maintainer"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_user <username>",
            reply_to_message_id=update.message.message_id
        )
    username = context.args[0].lstrip("@")
    user = await get_or_create_user(0, username)
    await set_user_role(user.tg_id, "User")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ User.",
        reply_to_message_id=update.message.message_id
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /add_mod (Admin only) ---
async def add_mod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_mod <username>",
            reply_to_message_id=update.message.message_id
        )
    username = context.args[0].lstrip("@")
    user = await get_or_create_user(0, username)
    await set_user_role(user.tg_id, "Maintainer")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ Maintainer.",
        reply_to_message_id=update.message.message_id
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /add_admin (Admin only) ---
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <username>",
            reply_to_message_id=update.message.message_id
        )
    username = context.args[0].lstrip("@")
    user = await get_or_create_user(0, username)
    await set_user_role(user.tg_id, "Admin")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ Admin.",
        reply_to_message_id=update.message.message_id
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin", "Maintainer", "User"]):
        return

    user = await get_or_create_user(
        tg_id=update.effective_user.id,
        username=update.effective_user.username or ""
    )

    text = update.message.text or ""
    urls = URL_PATTERN.findall(text)

    if not urls:
        await create_event(
            user_id=user.id,
            state="no link",
            device_option_id=0,
            initial_url="",
            final_url="",
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.",
            reply_to_message_id=update.message.message_id
        )

    if len(urls) > 1:
        await create_event(
            user_id=user.id,
            state="many links",
            device_option_id=0,
            initial_url="",
            final_url="",
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            "‚ùó –û–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_to_message_id=update.message.message_id
        )

    raw_url = urls[0]

    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(
            str(e),
            reply_to_message_id=update.message.message_id
        )

    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None, partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        for at in e.attempts:
            await create_proxy_log(at["attempt"], at["ip"], at["city"])
        await create_event(
            user_id=user.id,
            state="proxy error",
            device_option_id=device["id"],
            initial_url=raw_url,
            final_url="",
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_to_message_id=update.message.message_id
        )

    for at in proxy_attempts:
        await create_proxy_log(at["attempt"], at["ip"], at["city"])

    await create_event(
        user_id=user.id,
        state="success",
        device_option_id=device["id"],
        initial_url=initial_url,
        final_url=final_url,
        ip=ip,
        isp=isp
    )

    report = (
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL:\n{initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL:\n{final_url}\n"
        f"üåê IP: {ip}\n"
        f"üì° ISP: {isp}"
    )

    await update.message.reply_text(
        report,
        disable_web_page_preview=True,
        reply_to_message_id=update.message.message_id
    )

def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_user", add_user))
    app.add_handler(CommandHandler("add_mod", add_mod))
    app.add_handler(CommandHandler("add_admin", add_admin))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
