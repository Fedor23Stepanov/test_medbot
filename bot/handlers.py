# bot/handlers.py
import re
import asyncio
from functools import partial
from telegram import Update
from telegram.ext import (
    ContextTypes, MessageHandler, filters, CommandHandler, Application
)
from db.crud import (
    get_or_create_user, get_random_device,
    create_event, create_proxy_log,
    get_user_role, set_user_role
)
from crawler.redirector import fetch_redirect, ProxyAcquireError

URL_PATTERN = re.compile(r'https?://[^\s)]+')

# --- –£—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º ---
async def check_access(update: Update, roles_allowed: list[str]) -> bool:
    tg_id = update.effective_user.id
    role = await get_user_role(tg_id)
    if role not in roles_allowed:
        #await update.message.reply_text(
        #    "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
        #    reply_to_message_id=update.message.message_id
        #)
        return False
    return True

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1) –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    user = await get_or_create_user(
        tg_id=update.effective_user.id,
        username=update.effective_user.username or ""
    )
    # 2) –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ò –µ–≥–æ username –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤ ‚Äî –¥–∞—ë–º —Ä–æ–ª—å Admin
    current_role = await get_user_role(user.tg_id)
    if current_role != "Admin" and (update.effective_user.username in INITIAL_ADMINS):
        await set_user_role(user.tg_id, "Admin")
    # 3) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ —è –ø–æ –Ω–µ–π –ø–µ—Ä–µ–π–¥—É."
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /add_user (Admin & Maintainer) ---
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin", "Maintainer"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_user <username>",
            reply_to_message_id=update.message.message_id
        )
    username = context.args[0].lstrip("@")
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å (tg_id=0, —Ç.–∫. —é–∑–µ—Ä –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É)
    user = await get_or_create_user(0, username)
    await set_user_role(user.tg_id, "User")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ User.",
        reply_to_message_id=update.message.message_id
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /add_mod (Admin only) ---
async def add_mod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_mod <username>",
            reply_to_message_id=update.message.message_id
        )
    username = context.args[0].lstrip("@")
    user = await get_or_create_user(0, username)
    await set_user_role(user.tg_id, "Maintainer")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ Maintainer.",
        reply_to_message_id=update.message.message_id
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /add_admin (Admin only) ---
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <username>",
            reply_to_message_id=update.message.message_id
        )
    username = context.args[0].lstrip("@")
    user = await get_or_create_user(0, username)
    await set_user_role(user.tg_id, "Admin")
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ Admin.",
        reply_to_message_id=update.message.message_id
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π –ë–î –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º
    if not await check_access(update, ["Admin", "Maintainer", "User"]):
        return

    # –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å User
    user = await get_or_create_user(
        tg_id=update.effective_user.id,
        username=update.effective_user.username or ""
    )

    text = update.message.text or ""
    urls = URL_PATTERN.findall(text)

    # 1) –ù–µ—Ç —Å—Å—ã–ª–æ–∫
    if not urls:
        await create_event(
            user_id=user.id,
            state="no link",
            device_option_id=0,
            initial_url="",
            final_url="",
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.",
            reply_to_message_id=update.message.message_id
        )

    # 2) –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫
    if len(urls) > 1:
        await create_event(
            user_id=user.id,
            state="many links",
            device_option_id=0,
            initial_url="",
            final_url="",
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            "‚ùó –û–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_to_message_id=update.message.message_id
        )

    raw_url = urls[0]

    # 3) –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(
            str(e),
            reply_to_message_id=update.message.message_id
        )

    # 4) –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ –ø–æ—Ç–æ–∫–∞—Ö, –ª–æ–≤–∏–º –ø—Ä–æ–∫—Å–∏-–æ—à–∏–±–∫—É
    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None, partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        # –ª–æ–≥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
        for at in e.attempts:
            await create_proxy_log(at["attempt"], at["ip"], at["city"])
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        await create_event(
            user_id=user.id,
            state="proxy error",
            device_option_id=device["id"],
            initial_url=raw_url,
            final_url="",
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_to_message_id=update.message.message_id
        )

    # 5) –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–±–æ—Ä–∞
    for at in proxy_attempts:
        await create_proxy_log(at["attempt"], at["ip"], at["city"])

    # 6) –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    await create_event(
        user_id=user.id,
        state="success",
        device_option_id=device["id"],
        initial_url=initial_url,
        final_url=final_url,
        ip=ip,
        isp=isp
    )

    # 7) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏)
    report = (
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL:\n{initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL:\n{final_url}\n"
        f"üåê IP: {ip}\n"
        f"üì° ISP: {isp}"
    )

    # 8) –û–¥–∏–Ω –æ—Ç–≤–µ—Ç-—Ü–∏—Ç–∞—Ç–∞ –±–µ–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    await update.message.reply_text(
        report,
        disable_web_page_preview=True,
        reply_to_message_id=update.message.message_id
    )

def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_user", add_user))
    app.add_handler(CommandHandler("add_mod", add_mod))
    app.add_handler(CommandHandler("add_admin", add_admin))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
