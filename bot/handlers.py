# bot/handlers.py

import re
import asyncio
from functools import partial

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ContextTypes,
    MessageHandler, CallbackQueryHandler,
    filters, CommandHandler, Application
)

from db.crud import (
    invite_user,
    get_user_by_tg, get_user_by_id,
    activate_user,
    block_user_by_username,
    get_random_device,
    create_event,
    create_proxy_log,
    get_user_stats,
    list_active_users,
)
from crawler.redirector import fetch_redirect, ProxyAcquireError
from config import INITIAL_ADMINS
from db.models import UserStatus

URL_PATTERN = re.compile(r'https?://[^\s)]+')


# -------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨: –º–µ–Ω—é ---------------

def build_main_menu(role: str) -> ReplyKeyboardMarkup:
    base = [["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]]
    if role in ("Maintainer", "Admin"):
        base.append(["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"])
    return ReplyKeyboardMarkup(base, resize_keyboard=True)


async def show_main_menu(update: Update, *, role: str):
    kb = build_main_menu(role)
    await update.message.reply_text("üßæ –ú–µ–Ω—é –ë–æ—Ç–∞", reply_markup=kb)


# -------------- /start –∏ /menu ---------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    username = (update.effective_user.username or "").strip().lstrip("@").lower()

    user = await get_user_by_tg(tg_id)
    if user:
        if user.status is UserStatus.blocked:
            return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if user.status is UserStatus.active:
            return await show_main_menu(update, role=user.role)

    # –ø–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ pending-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activated = await activate_user(tg_id, username)
    if activated:
        return await show_main_menu(update, role=activated.role)

    # –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    await update.message.reply_text(
        "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=ReplyKeyboardRemove()
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active:
        return
    await show_main_menu(update, role=user.role)


# -------------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---------------

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active:
        return
    st = await get_user_stats(user.id)
    text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {st['all_time']}\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {st['last_month']}\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {st['last_week']}"
    )
    await update.message.reply_text(text, reply_markup=build_main_menu(user.role))


# -------------- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–ª—è –º–æ–¥–µ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤) ---------------

async def users_list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active or user.role not in ("Maintainer", "Admin"):
        return

    all_users = await list_active_users()
    kb = [
        [InlineKeyboardButton(f"@{u.username}", callback_data=f"user_{u.id}")]
        for u in all_users
    ]
    await update.message.reply_text(
        "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", 
        reply_markup=InlineKeyboardMarkup(kb)
    )


async def user_detail_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, uid = q.data.split("_", 1)
    target = await get_user_by_id(int(uid))
    if not target:
        return await q.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    st = await get_user_stats(target.id)
    text = (
        f"üë§ @{target.username}\n"
        f"–†–æ–ª—å: {target.role}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {st['all_time']}\n"
        f"‚Ä¢ –ú–µ—Å—è—Ü: {st['last_month']}\n"
        f"‚Ä¢ –ù–µ–¥–µ–ª—è: {st['last_week']}"
    )
    kb = [[InlineKeyboardButton("‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{target.id}")]]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))


async def block_user_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, uid = q.data.split("_", 1)
    target = await get_user_by_id(int(uid))
    if target:
        await block_user_by_username(target.username)
        await q.edit_message_text(f"‚ùå @{target.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await q.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# -------------- –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ---------------

async def start_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active or user.role not in ("Maintainer", "Admin"):
        return
    context.user_data["awaiting_new_username"] = True
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
        reply_markup=ReplyKeyboardRemove()
    )


#  –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç ‚Äî –ª–∏–±–æ —ç—Ç–æ –Ω–∏–∫ –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞, –ª–∏–±–æ —Å—Å—ã–ª–∫–∞:
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    text = update.message.text.strip()

    # 1) –ï—Å–ª–∏ –∂–¥—ë–º –Ω–∏–∫ –¥–ª—è /add —á–µ—Ä–µ–∑ –º–µ–Ω—é
    if context.user_data.get("awaiting_new_username"):
        uname = text.lstrip("@").lower()
        new = await invite_user(username=uname, role="User", invited_by=tg_id)
        context.user_data.pop("awaiting_new_username", None)
        await update.message.reply_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω. –°—Ç–∞—Ç—É—Å: {new.status}.",
            reply_markup=build_main_menu((await get_user_by_tg(tg_id)).role)
        )
        return

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–º–µ–Ω—é
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await stats_cmd(update, context)
    if text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        return await users_list_cmd(update, context)
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        return await start_add_user(update, context)
    if text == "üßæ –ú–µ–Ω—é –ë–æ—Ç–∞":
        return await menu(update, context)

    # 3) –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
    user = await get_user_by_tg(tg_id)
    if not user or user.status is not UserStatus.active:
        return
    urls = URL_PATTERN.findall(text)
    if not urls:
        await create_event(user_id=user.id, state="no link",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.",
            reply_to_message_id=update.message.message_id
        )
    if len(urls) > 1:
        await create_event(user_id=user.id, state="many links",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text(
            "‚ùó –û–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_to_message_id=update.message.message_id
        )

    raw_url = urls[0]
    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(
            str(e),
            reply_to_message_id=update.message.message_id
        )

    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None, partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        for at in e.attempts:
            await create_proxy_log(at["attempt"], at["ip"], at["city"])
        await create_event(
            user_id=user.id, state="proxy error",
            device_option_id=device["id"], initial_url=raw_url,
            final_url="", ip=None, isp=None
        )
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_to_message_id=update.message.message_id
        )
    for at in proxy_attempts:
        await create_proxy_log(at["attempt"], at["ip"], at["city"])
    await create_event(
        user_id=user.id, state="success",
        device_option_id=device["id"],
        initial_url=initial_url, final_url=final_url,
        ip=ip, isp=isp
    )

    report = (
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL:\n{initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL:\n{final_url}\n"
        f"üåê IP: {ip}\n"
        f"üì° ISP: {isp}"
    )
    await update.message.reply_text(
        report,
        disable_web_page_preview=True,
        reply_to_message_id=update.message.message_id
    )


def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    # inline callbacks
    app.add_handler(CallbackQueryHandler(user_detail_cb, pattern=r"^user_\d+$"))
    app.add_handler(CallbackQueryHandler(block_user_cb, pattern=r"^block_\d+$"))
    # reply-–∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
