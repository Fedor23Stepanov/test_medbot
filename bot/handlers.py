# bot/handlers.py
import re
import asyncio
from functools import partial
from telegram import Update
from telegram.ext import (
    ContextTypes, MessageHandler, filters, CommandHandler, Application
)
from db.crud import (
    get_or_create_user, get_random_device,
    create_event, create_proxy_log, 
    get_user_role, set_user_role
)
from crawler.redirector import fetch_redirect, ProxyAcquireError


URL_PATTERN = re.compile(r'https?://[^\s)]+')  # –¥–æ–±–∞–≤–ª–µ–Ω–æ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –∏ —è –ø–µ—Ä–µ–π–¥—É –ø–æ –Ω–µ–π."
    )

async def check_access(update, role_allowed: list[str]) -> bool:
    role = await get_user_role(update.effective_user.id)
    if role not in role_allowed:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
            reply_to_message_id=update.message.message_id
        )
        return False
    return True

async def add_user(update, context):
    if not await check_access(update, ["Admin", "Maintainer"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_user <username>", reply_to_message_id=update.message.message_id)
    username = context.args[0].lstrip("@")
    # –¢—É—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å tg_id –ø–æ username —á–µ—Ä–µ–∑ Telegram API –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /start
    user = await get_or_create_user(0, username)  # –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ –≤–∞—à flow
    await set_user_role(user.tg_id, "User")
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ User.", reply_to_message_id=update.message.message_id)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    urls = URL_PATTERN.findall(text)

    # 0) –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫:
    if not urls:
        await create_event(
            user_id=user.id,
            state="no link",
            device_option_id=None,
            initial_url=None,
            final_url=None,
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É.",
            reply_to_message_id=update.message.message_id
        )
    if len(urls) > 1:
        await create_event(
            user_id=user.id,
            state="many links",
            device_option_id=None,
            initial_url=None,
            final_url=None,
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            "‚ùó –û–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_to_message_id=update.message.message_id        
        )

    raw_url = urls[0]

    user = await get_or_create_user(
        tg_id=update.effective_user.id,
        username=update.effective_user.username or ""
    )
    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(str(e))

    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None, partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        for at in e.attempts:
            await create_proxy_log(at["attempt"], at["ip"], at["city"])
        await create_event(
            user_id=user.id,
            state="proxy error",
            device_option_id=device["id"],
            initial_url=initial_url,
            final_url=None,
            ip=None,
            isp=None
        )
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_to_message_id=update.message.message_id  # –¥–æ–±–∞–≤–ª–µ–Ω–æ
        )

    for at in proxy_attempts:
        await create_proxy_log(at["attempt"], at["ip"], at["city"])

    await create_event(
        user_id=user.id,
        state="success",
        device_option_id=device["id"],
        initial_url=initial_url,
        final_url=final_url,
        ip=ip,
        isp=isp
    )

    report = (
        #f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ {raw_url}\n\n"
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        #f"   ‚Ä¢ –≠–∫—Ä–∞–Ω: {device['css_size'][0]}√ó{device['css_size'][1]}\n"
        #f"   ‚Ä¢ DPR={device['dpr']}, mobile={device['mobile']}\n\n"
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL:\n"
        f"{initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL:\n"
        f"{final_url}\n"
        f"üåê IP: {ip}"\n"
        f"üì° ISP: {isp}"
    )

    # –æ–¥–∏–Ω –∏—Ç–æ–≥–æ–≤—ã–π reply —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ reply_to_message_id
    await update.message.reply_text(
        report,
        disable_web_page_preview=True,            # –¥–æ–±–∞–≤–ª–µ–Ω–æ
        reply_to_message_id=update.message.message_id  # –¥–æ–±–∞–≤–ª–µ–Ω–æ
    )

def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
