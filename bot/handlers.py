# bot/handlers.py

import re
import asyncio
from functools import partial

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CommandHandler,
    Application
)

from db.crud import (
    get_user_by_tg,
    get_user_by_id,           # ‚Üê –≤–º–µ—Å—Ç–æ get_user_by_tg –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö id
    activate_user,
    invite_user,
    list_pending_users,        # ‚Üê –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç User.status==pending (—Å –æ–ø—Ü–∏–µ–π invited_by)
    revoke_invitation,
    get_user_stats,
    get_random_device,
    create_event,
    create_proxy_log,
)
from crawler.redirector import fetch_redirect, ProxyAcquireError
from db.models import UserStatus

URL_PATTERN = re.compile(r'https?://[^\s)]+')


# ‚Äî‚Äî‚Äî –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ –º–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def build_main_menu(role: str) -> ReplyKeyboardMarkup:
    kb = [["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]]
    if role in ("Maintainer", "Admin"):
        kb.append(["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"])
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)


async def show_main_menu(update: Update, role: str):
    await update.message.reply_text("üßæ –ú–µ–Ω—é –±–æ—Ç–∞", reply_markup=build_main_menu(role))


# ‚Äî‚Äî‚Äî /start –∏ /menu ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id   = update.effective_user.id
    username = (update.effective_user.username or "").strip().lstrip("@").lower()

    user = await get_user_by_tg(tg_id)
    if user and user.status is UserStatus.active:
        return await show_main_menu(update, role=user.role)
    if user and user.status is UserStatus.blocked:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    activated = await activate_user(tg_id, username)
    if activated:
        return await show_main_menu(update, role=activated.role)

    await update.message.reply_text(
        "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=ReplyKeyboardRemove()
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if user and user.status is UserStatus.active:
        await show_main_menu(update, role=user.role)


# ‚Äî‚Äî‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active:
        return
    st = await get_user_stats(user.id)
    text = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {st['all_time']}\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {st['last_month']}\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {st['last_week']}"
    )
    await update.message.reply_text(text, reply_markup=build_main_menu(user.role))


# ‚Äî‚Äî‚Äî –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö (pending) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def users_list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active or user.role not in ("Maintainer", "Admin"):
        return

    # —É –º–æ–¥–µ—Ä–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏, —É –∞–¥–º–∏–Ω–∞ ‚Äî –≤—Å–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ
    pendings = (
        await list_pending_users()
        if user.role == "Admin"
        else await list_pending_users(invited_by=user.tg_id)
    )

    if not pendings:
        return await update.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.",
            reply_markup=build_main_menu(user.role)
        )

    buttons = []
    for u in pendings:
        # —ç–º–æ–¥–∂–∏ —Å—Ç–∞—Ç—É—Å–∞
        emoji = {"pending":"‚è≥","active":"‚úÖ","blocked":"‚õîÔ∏è"}[u.status.value]
        buttons.append([
            InlineKeyboardButton(f"@{u.username} {emoji}", callback_data=f"invite_{u.id}")
        ])

    await update.message.reply_text(
        "üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def invite_detail_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, uid = q.data.split("_", 1)
    target = await get_user_by_id(int(uid))
    if not target:
        return await q.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    emoji = {
        "pending":"‚è≥ –û–∂–∏–¥–∞–µ—Ç",
        "active":"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        "blocked":"‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    }[target.status.value]
    text = f"@{target.username}\n–°—Ç–∞—Ç—É—Å: {emoji}"
    kb = [[InlineKeyboardButton("üóëÔ∏è –û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data=f"revoke_{target.id}")]]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))


async def revoke_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, uid = q.data.split("_", 1)
    ok = await revoke_invitation(int(uid))
    await q.edit_message_text(
        "‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–æ–∑–≤–∞–Ω–æ." if ok else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å."
    )


# ‚Äî‚Äî‚Äî –†–µ–∂–∏–º ¬´–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active or user.role not in ("Maintainer","Admin"):
        return
    context.user_data["awaiting_new_username"] = True
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
        reply_markup=ReplyKeyboardRemove()
    )


# ‚Äî‚Äî‚Äî –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    text = update.message.text or ""
    username = (update.effective_user.username or "").strip().lstrip("@").lower()

    # –∞–≤—Ç–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª—é–±–æ–≥–æ pending
    user = await get_user_by_tg(tg_id)
    if not user:
        user = await activate_user(tg_id, username)
        if user:
            return await show_main_menu(update, role=user.role)
        return  # –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω ‚Äî –∏–≥–Ω–æ—Ä

    if user.status is UserStatus.blocked:
        return  # –∏–≥–Ω–æ—Ä

    # –≤–≤–æ–¥ –Ω–∏–∫–∞ –¥–ª—è ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª
    if context.user_data.pop("awaiting_new_username", False):
        uname = text.lstrip("@").lower()
        new = await invite_user(username=uname, role="User", invited_by=tg_id)
        return await update.message.reply_text(
            f"@{new.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω. –°—Ç–∞—Ç—É—Å: ‚è≥",
            reply_markup=build_main_menu(user.role)
        )

    # –º–µ–Ω—é-–∫–Ω–æ–ø–∫–∏
    if text == "üßæ –ú–µ–Ω—é –±–æ—Ç–∞":
        return await menu(update, context)
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await stats_cmd(update, context)
    if text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        return await users_list_cmd(update, context)
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        return await start_add_user(update, context)

    # —Å—Å—ã–ª–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è active
    if user.status is not UserStatus.active:
        return

    urls = URL_PATTERN.findall(text)
    if not urls:
        await create_event(user_id=user.id, state="no link",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.",
                                               reply_to_message_id=update.message.message_id)
    if len(urls) > 1:
        await create_event(user_id=user.id, state="many links",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text("‚ùó –û–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
                                               reply_to_message_id=update.message.message_id)

    raw_url = urls[0]
    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(str(e),
                                               reply_to_message_id=update.message.message_id)

    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None, partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        for at in e.attempts:
            await create_proxy_log(at["attempt"], at["ip"], at["city"])
        await create_event(user_id=user.id, state="proxy error",
                           device_option_id=device["id"], initial_url=raw_url,
                           final_url="", ip=None, isp=None)
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_to_message_id=update.message.message_id
        )

    for at in proxy_attempts:
        await create_proxy_log(at["attempt"], at["ip"], at["city"])

    await create_event(user_id=user.id, state="success",
                       device_option_id=device["id"],
                       initial_url=initial_url, final_url=final_url,
                       ip=ip, isp=isp)

    report = (
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL:\n{initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL:\n{final_url}\n"
        f"üåê IP: {ip}\n"
        f"üì° ISP: {isp}"
    )
    await update.message.reply_text(report,
                                    disable_web_page_preview=True,
                                    reply_to_message_id=update.message.message_id)


def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(invite_detail_cb, pattern=r"^invite_\d+$"))
    app.add_handler(CallbackQueryHandler(revoke_cb,       pattern=r"^revoke_\d+$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
