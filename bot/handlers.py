# bot/handlers.py

import re
import asyncio
from functools import partial

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CommandHandler,
    Application
)

from db.crud import (
    get_user_by_tg,
    activate_user,
    invite_user,
    list_pending_users,
    revoke_invitation,
    get_user_stats,
    block_user_by_username,
    get_random_device,
    create_event,
    create_proxy_log,
)
from crawler.redirector import fetch_redirect, ProxyAcquireError
from db.models import UserStatus

URL_PATTERN = re.compile(r'https?://[^\s)]+')


# ‚Äî‚Äî‚Äî –ü–æ–º–æ—â–Ω–∏–∫–∏ –ø–æ –º–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def build_main_menu(role: str) -> ReplyKeyboardMarkup:
    """
    –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: –≤—Å–µ –≤–∏–¥—è—Ç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏,
    –∞ –º–æ–¥–µ—Ä—ã –∏ –∞–¥–º–∏–Ω—ã ‚Äî –µ—â—ë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    if role in ("Maintainer", "Admin"):
        keyboard.append(["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def show_main_menu(update: Update, role: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update.message.reply_text(
        "üßæ –ú–µ–Ω—é –±–æ—Ç–∞",
        reply_markup=build_main_menu(role)
    )


# ‚Äî‚Äî‚Äî /start –∏ /menu ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    username = (update.effective_user.username or "").strip().lstrip("@").lower()

    # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π ‚Äî –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—é
    user = await get_user_by_tg(tg_id)
    if user and user.status is UserStatus.active:
        return await show_main_menu(update, role=user.role)
    if user and user.status is UserStatus.blocked:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö

    # –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å pending-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activated = await activate_user(tg_id, username)
    if activated:
        return await show_main_menu(update, role=activated.role)

    # –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞—à—ë–ª—Å—è ‚Äî –æ—Ç–∫–∞–∑
    await update.message.reply_text(
        "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=ReplyKeyboardRemove()
    )


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω)."""
    user = await get_user_by_tg(update.effective_user.id)
    if user and user.status is UserStatus.active:
        await show_main_menu(update, role=user.role)


# ‚Äî‚Äî‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def stats_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."""
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active:
        return
    stats = await get_user_stats(user.id)
    text = (
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats['all_time']}\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {stats['last_month']}\n"
        f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {stats['last_week']}"
    )
    await update.message.reply_text(
        text,
        reply_markup=build_main_menu(user.role)
    )


# ‚Äî‚Äî‚Äî –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def users_list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–Ω–æ–ø–∫–∞ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
    ‚Äì –º–æ–¥–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö pending-–ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö,
    ‚Äì –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö pending-–ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.
    """
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active:
        return
    if user.role not in ("Maintainer", "Admin"):
        return

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ—Ö, –∫–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
    if user.role == "Admin":
        pendings = await list_pending_users()
    else:  # Maintainer
        pendings = await list_pending_users(invited_by=user.tg_id)

    if not pendings:
        await update.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.",
            reply_markup=build_main_menu(user.role)
        )
        return

    # —Å—Ç—Ä–æ–∏–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏: username + —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
    buttons = []
    for u in pendings:
        emoji = {
            UserStatus.pending:  "‚è≥",
            UserStatus.active:   "‚úÖ",
            UserStatus.blocked:  "‚õîÔ∏è"
        }.get(u.status, "")
        text = f"@{u.username} {emoji}"
        buttons.append([InlineKeyboardButton(text, callback_data=f"invite_{u.id}")])

    await update.message.reply_text(
        "üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def invite_detail_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–ª–±—ç–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö."""
    q = update.callback_query
    await q.answer()
    _, uid = q.data.split("_", 1)
    user = await get_user_by_tg(int(uid))  # –∏–ª–∏ fetch –ø–æ id, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_user_by_id
    if not user:
        return await q.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    emoji = {
        UserStatus.pending:  "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
        UserStatus.active:   "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        UserStatus.blocked:  "‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    }.get(user.status, "")
    text = f"@{user.username}\n–°—Ç–∞—Ç—É—Å: {emoji}"
    kb = [[InlineKeyboardButton("üóëÔ∏è –û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data=f"revoke_{user.id}")]]
    await q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb))


async def revoke_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–ª–±—ç–∫ –û—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."""
    q = update.callback_query
    await q.answer()
    _, uid = q.data.split("_", 1)
    success = await revoke_invitation(int(uid))
    if success:
        await q.edit_message_text("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–æ–∑–≤–∞–Ω–æ.")
    else:
        await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–∑–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")


# ‚Äî‚Äî‚Äî –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def start_add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–∏–∫–∞."""
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status is not UserStatus.active:
        return
    if user.role not in ("Maintainer", "Admin"):
        return
    context.user_data["awaiting_new_username"] = True
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @):",
        reply_markup=ReplyKeyboardRemove()
    )


# ‚Äî‚Äî‚Äî –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    text = update.message.text or ""
    username = (update.effective_user.username or "").strip().lstrip("@").lower()

    # 0) –∞–≤—Ç–æ-–∞–∫—Ç–∏–≤–∞—Ü–∏—è pending –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    user = await get_user_by_tg(tg_id)
    if not user:
        user = await activate_user(tg_id, username)
        if user:
            return await show_main_menu(update, role=user.role)
        return  # –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    if user.status is UserStatus.blocked:
        return  # –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    # 1) —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if context.user_data.get("awaiting_new_username"):
        uname = text.lstrip("@").lower()
        new = await invite_user(username=uname, role="User", invited_by=tg_id)
        context.user_data.pop("awaiting_new_username", None)
        return await update.message.reply_text(
            f"@{new.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω. –°—Ç–∞—Ç—É—Å: ‚è≥",
            reply_markup=build_main_menu(user.role)
        )

    # 2) –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if text == "üßæ –ú–µ–Ω—é –ë–æ—Ç–∞":
        return await menu(update, context)
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        return await stats_cmd(update, context)
    if text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        return await users_list_cmd(update, context)
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
        return await start_add_user(update, context)

    # 3) –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è active)
    if user.status is not UserStatus.active:
        return

    urls = URL_PATTERN.findall(text)
    if not urls:
        await create_event(user_id=user.id, state="no link",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.",
            reply_to_message_id=update.message.message_id
        )
    if len(urls) > 1:
        await create_event(user_id=user.id, state="many links",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text(
            "‚ùó –û–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_to_message_id=update.message.message_id
        )

    raw_url = urls[0]
    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(
            str(e),
            reply_to_message_id=update.message.message_id
        )

    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None, partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        for at in e.attempts:
            await create_proxy_log(at["attempt"], at["ip"], at["city"])
        await create_event(user_id=user.id, state="proxy error",
                           device_option_id=device["id"], initial_url=raw_url,
                           final_url="", ip=None, isp=None)
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_to_message_id=update.message.message_id
        )

    for at in proxy_attempts:
        await create_proxy_log(at["attempt"], at["ip"], at["city"])

    await create_event(user_id=user.id, state="success",
                       device_option_id=device["id"],
                       initial_url=initial_url, final_url=final_url,
                       ip=ip, isp=isp)

    report = (
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL:\n{initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL:\n{final_url}\n"
        f"üåê IP: {ip}\n"
        f"üì° ISP: {isp}"
    )
    await update.message.reply_text(
        report,
        disable_web_page_preview=True,
        reply_to_message_id=update.message.message_id
    )


# ‚Äî‚Äî‚Äî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(invite_detail_cb, pattern=r"^invite_\d+$"))
    app.add_handler(CallbackQueryHandler(revoke_cb,       pattern=r"^revoke_\d+$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
