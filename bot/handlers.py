# bot/handlers.py

import re
import asyncio
from functools import partial
from telegram import Update
from telegram.ext import ContextTypes, MessageHandler, filters, CommandHandler, Application

from db.crud import (
    invite_user,
    get_user_by_tg,
    activate_user,
    block_user_by_username,
    get_random_device,
    create_event,
    create_proxy_log,
)
from crawler.redirector import fetch_redirect, ProxyAcquireError
from config import INITIAL_ADMINS

URL_PATTERN = re.compile(r'https?://[^\s)]+')


# --- –£—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º –∏ —Å—Ç–∞—Ç—É—Å—É ---
async def check_access(update: Update, roles_allowed: list[str]) -> bool:
    user = await get_user_by_tg(update.effective_user.id)
    if not user or user.status != "active" or user.role not in roles_allowed:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
            reply_to_message_id=update.message.message_id
        )
        return False
    return True


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    username_raw = update.effective_user.username or ""
    username = username_raw.strip().lstrip("@").lower()

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —é–∑–µ—Ä ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç
    user = await get_user_by_tg(tg_id)
    if user:
        if user.status == "active":
            return await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –ø–æ –Ω–µ–π –ø–µ—Ä–µ–π–¥—É.",
                reply_to_message_id=update.message.message_id
            )
        if user.status == "blocked":
            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            return

    # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å pending-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
    activated = await activate_user(tg_id, username)
    if activated:
        return await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, @{activated.username}! –¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {activated.role}. "
            "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –ø–æ –Ω–µ–π –ø–µ—Ä–µ–π–¥—É.",
            reply_to_message_id=update.message.message_id
        )

    # –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ active, –Ω–∏ –≤ pending ‚Üí –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    await update.message.reply_text(
        "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_to_message_id=update.message.message_id
    )


# --- –ö–æ–º–∞–Ω–¥–∞ /add_user (Admin & Maintainer) ---
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin", "Maintainer"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_user <username>",
            reply_to_message_id=update.message.message_id
        )

    username = context.args[0].lstrip("@").lower()
    new = await invite_user(username=username, role="User", invited_by=update.effective_user.id)
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω —Å —Ä–æ–ª—å—é {new.role}. –°—Ç–∞—Ç—É—Å: {new.status}.",
        reply_to_message_id=update.message.message_id
    )


# --- –ö–æ–º–∞–Ω–¥–∞ /add_mod (Admin only) ---
async def add_mod(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_mod <username>",
            reply_to_message_id=update.message.message_id
        )

    username = context.args[0].lstrip("@").lower()
    new = await invite_user(username=username, role="Maintainer", invited_by=update.effective_user.id)
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω —Å —Ä–æ–ª—å—é {new.role}. –°—Ç–∞—Ç—É—Å: {new.status}.",
        reply_to_message_id=update.message.message_id
    )


# --- –ö–æ–º–∞–Ω–¥–∞ /add_admin (Admin only) ---
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <username>",
            reply_to_message_id=update.message.message_id
        )

    username = context.args[0].lstrip("@").lower()
    new = await invite_user(username=username, role="Admin", invited_by=update.effective_user.id)
    await update.message.reply_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new.username} –ø—Ä–∏–≥–ª–∞—à—ë–Ω —Å —Ä–æ–ª—å—é {new.role}. –°—Ç–∞—Ç—É—Å: {new.status}.",
        reply_to_message_id=update.message.message_id
    )


# --- –ö–æ–º–∞–Ω–¥–∞ /block (Admin & Maintainer) ---
async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update, ["Admin", "Maintainer"]):
        return
    if len(context.args) != 1:
        return await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block <username>",
            reply_to_message_id=update.message.message_id
        )

    username = context.args[0].lstrip("@").lower()
    ok = await block_user_by_username(username)
    if ok:
        await update.message.reply_text(
            f"‚ùå @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_to_message_id=update.message.message_id
        )
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_to_message_id=update.message.message_id
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    username_raw = update.effective_user.username or ""
    username = username_raw.strip().lstrip("@").lower()

    user = await get_user_by_tg(tg_id)
    if user and user.status == "blocked":
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    if not user:
        # –ø—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–∏–∫—É
        user = await activate_user(tg_id, username)
        if user:
            return await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç, @{user.username}! –¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {user.role}. "
                "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –ø–æ –Ω–µ–π –ø–µ—Ä–µ–π–¥—É.",
                reply_to_message_id=update.message.message_id
            )
        # –Ω–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    # –¥–∞–ª—å—à–µ ‚Äî —Ç–æ–ª—å–∫–æ active
    text = update.message.text or ""
    urls = URL_PATTERN.findall(text)

    if not urls:
        await create_event(user_id=user.id, state="no link",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.",
            reply_to_message_id=update.message.message_id
        )

    if len(urls) > 1:
        await create_event(user_id=user.id, state="many links",
                           device_option_id=0, initial_url="", final_url="",
                           ip=None, isp=None)
        return await update.message.reply_text(
            "‚ùó –û–¥–Ω—É —Å—Å—ã–ª–∫—É –∑–∞ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_to_message_id=update.message.message_id
        )

    raw_url = urls[0]
    try:
        device = await get_random_device()
    except ValueError as e:
        return await update.message.reply_text(
            str(e),
            reply_to_message_id=update.message.message_id
        )

    loop = asyncio.get_running_loop()
    try:
        initial_url, final_url, ip, isp, _, proxy_attempts = await loop.run_in_executor(
            None, partial(fetch_redirect, raw_url, device)
        )
    except ProxyAcquireError as e:
        for at in e.attempts:
            await create_proxy_log(at["attempt"], at["ip"], at["city"])
        await create_event(user_id=user.id, state="proxy error",
                           device_option_id=device["id"], initial_url=raw_url,
                           final_url="", ip=None, isp=None)
        return await update.message.reply_text(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∑–∞ {len(e.attempts)} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_to_message_id=update.message.message_id
        )

    for at in proxy_attempts:
        await create_proxy_log(at["attempt"], at["ip"], at["city"])

    await create_event(user_id=user.id, state="success",
                       device_option_id=device["id"],
                       initial_url=initial_url, final_url=final_url,
                       ip=ip, isp=isp)

    report = (
        f"üì± –ü—Ä–æ—Ñ–∏–ª—å: {device['model']}\n"
        f"   ‚Ä¢ UA: {device['ua']}\n"
        f"üîó –ù–∞—á–∞–ª—å–Ω—ã–π URL:\n{initial_url}\n"
        f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π URL:\n{final_url}\n"
        f"üåê IP: {ip}\n"
        f"üì° ISP: {isp}"
    )
    await update.message.reply_text(
        report,
        disable_web_page_preview=True,
        reply_to_message_id=update.message.message_id
    )


def register_handlers(app: Application):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_user", add_user))
    app.add_handler(CommandHandler("add_mod", add_mod))
    app.add_handler(CommandHandler("add_admin", add_admin))
    app.add_handler(CommandHandler("block", block_user))
    app.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
